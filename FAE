FUNCTION & ERRORS

# FAE_ETH_AVAX
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
# Description
The Reyes_DigitalWallet contract is a simple implementation of a digital wallet on the Ethereum blockchain. It allows users to deposit funds into their wallet and make payments from their balance.

- walletOwner: This variable stores the address of the person who deployed the contract, known as the wallet owner.
- userBalances: A mapping that associates each user's address with their respective balance in the wallet.

contract Reyes_DigitalWallet {
    address public walletOwner;
    mapping(address => uint256) public userBalances;
# Getting Started:  
- FundsDeposited: An event that is triggered when a user deposits funds into their wallet, recording the user's address and the deposited amount.
- PaymentProcessed: An event that is triggered when a user makes a payment from their wallet, recording the user's address and the payment amount.

    event FundsDeposited(address indexed user, uint256 amount);
    event PaymentProcessed(address indexed user, uint256 amount);
  
- This function runs once when the contract is deployed. It sets the walletOwner to the address of the person deploying the contract.
    constructor() {
        walletOwner = msg.sender;
    }
# Executing the Functions:
- depositFunds: Purpose deposit funds: Allows users to deposit Ether into their wallet.
- getBalance:Purpose: Allows users to check their wallet balance.
- processPayment: Purpose: Allows users to make payments from their wallet.

    function depositFunds() external payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        
        userBalances[msg.sender] += msg.value;
        emit FundsDeposited(msg.sender, msg.value);
    }

    function getBalance() external view returns (uint256) {
        return userBalances[msg.sender];
    }

    function processPayment(uint256 paymentAmount) external {
        require(paymentAmount > 50000, "Payment amount must be greater than zero");
        require(userBalances[msg.sender] >= paymentAmount, "Insufficient balance for payment");

        userBalances[msg.sender] -= paymentAmount;
        emit PaymentProcessed(msg.sender, paymentAmount);
    }

    receive() external payable {
        revert("Digital wallet contract does not accept direct payments");
    }
}
